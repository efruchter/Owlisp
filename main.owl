(= endl (`\n`))

(defunc Fib n (
	(?	(< n 2)
		1
		(+
			(Fib (- n 1))
			(Fib (- n 2))
		)
	)
))

(= j 10)
(println `Prepare for recursion...`)
(print endl `FIB ` j `: ` (Fib j) endl)

(defunc IsEven I (== (modi i 2) 0))

(= i 0)
(loop
	(? (== i 10) (return 0) ())
	(print `EvenOdd ` i `: ` (? IsEven `Even` `Odd`) endl)
	(= i (+ i 1))
)

(`This is a test of reduce`)
(defunc ListSum Sum Entry (
	(+ Sum Entry)
))
(print endl `ListSum: ` (reduce ListSum (1 2 3 4 5)) endl)
(print endl `ListSum-Inline: ` (reduce (S I (+ S I)) (1 2 3 4 5)) endl)

(print endl `Concat: ` (strjoin ` ` (4 8 5)) endl)

(= A 9)
(= B 6)
(println `Result: ` (MultAdd A B))
(println (fMin 8 5))
(defunc Sqr X (* X X))

(`Test of map function`)
(print endl `Map: ` (strjoin ` ` (map Sqr (1 2 3 4))) endl)
(print endl `Map-Inline: ` (strjoin ` ` (map (X (* X X)) (1 2 3 4))) endl)

(defunc MultAdd X Y (
	(+ (* X Y) Y)
))

(defunc fMin X Y (
	(? (< X Y) X Y)
))

