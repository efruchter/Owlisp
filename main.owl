(= endl (`\n`))

(= n 20)
(= p1 0)
(= p0 1)
(= i n)
(loop
	(?	(< i 2)
		(return p0)
		(
			(print endl `FIB ` (- n i) `: ` p0 endl)
			(= _p0 p0)
			(= i (- i 1))
			(= p0 (+ p1 p0))
			(= p1 _p0)
		)
	)
)

(defunc Fib n (
	(= p1 1)
	(= p0 1)
	(= i n)
	(loop
		(?	(< i 2)
			(return p0)
			(
				(= _p0 p0)
				(= i (- i 1))
				(= p0 (+ p1 p0))
				(= p1 _p0)
			)
		)
	)
	(return p0)
))

(= j 10)
(print endl `FIB ` j `: ` (Fib j) endl)
(return)

(= _i 0)
(loop
	(= _i (+ _i 1))
	(? (< _i 10)
		(print endl `FIB ` (Fib _i) endl)
		(return 0)
	)
)

(= i 0)
(loop 
	(println i)
	(= i (+ i 1))
	(? (== i 6) (return i) ())
)

(`This is a test of reduce`)
(defunc ListSum Sum Entry (
	(+ Sum Entry)
))
(print endl `ListSum: ` (reduce ListSum (1 2 3 4 5)) endl)
(print endl `ListSum-Inline: ` (reduce (S I (+ S I)) (1 2 3 4 5)) endl)

(print endl `Concat: ` (strjoin ` ` (4 8 5)) endl)

(= A 9)
(= B 6)
(println `Result: ` (MultAdd A B))
(println (fMin 8 5))
(defunc Sqr X (* X X))

(`Test of map function`)
(print endl `Map: ` (strjoin ` ` (map Sqr (1 2 3 4))) endl)
(print endl `Map-Inline: ` (strjoin ` ` (map (X (* X X)) (1 2 3 4))) endl)

(defunc MultAdd X Y (
	(+ (* X Y) Y)
))

(defunc fMin X Y (
	(? (< X Y) X Y)
))

